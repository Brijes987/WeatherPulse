name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_weather_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_weather_db
        REDIS_URL: redis://localhost:6379
        OPENWEATHER_API_KEY: test_key
      run: |
        cd backend
        pytest -v
    
    - name: Lint backend code
      run: |
        cd backend
        pip install flake8 black
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check app

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Lint frontend code
      run: |
        cd frontend
        npm run lint --if-present
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: weatherpulse-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: weatherpulse-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build scheduler image
      uses: docker/build-push-action@v5
      with:
        context: ./scheduler
        push: false
        tags: weatherpulse-scheduler:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create test environment file
      run: |
        cp .env.example .env
        echo "OPENWEATHER_API_KEY=test_key" >> .env
    
    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.yml up -d --build
        sleep 30
        
        # Test backend health
        curl -f http://localhost:8000/health || exit 1
        
        # Test frontend accessibility
        curl -f http://localhost:3000 || exit 1
        
        # Test API endpoints
        curl -f http://localhost:8000/docs || exit 1
        
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'